pipeline {
    agent any

    environment {
        PYTHON_VERSION = '3.11'
    }
    stages {
        stage('Setup Python Environment') {
            steps {
                script {
                    sh '''
                    pip install build wheel
                    '''
                    // Ensure Python 3.11 is available, fail if not
                    sh '''
                        if ! command -v python3.11 &> /dev/null; then
                            echo "Error: Python 3.11 is not installed or not in PATH."
                            exit 1
                        fi
                    '''

                    // Get the actual Python 3.11 binary path and check version in dynaface-lib
                    sh '''
                        PYTHON_PATH=$(command -v python3.11)
                        echo "Using Python at: $PYTHON_PATH"

                        cd dynaface-lib
                        $PYTHON_PATH --version
                    '''
                }
            }
        }

        stage('Install Dependencies') {
            steps {
                script {
                    // Change to dynaface-lib and install your package along with testing dependencies
                    sh '''
                        cd dynaface-lib
                        pip install -e .
                        pip install --upgrade setuptools
                        pip install pytest pytest-cov
                    '''
                }
            }
        }
        stage('Static Code Analysis') {
            steps {
                sh '''
                    cd dynaface-lib

                    pip install flake8 mypy bandit black isort

                    echo "Running flake8..."
                    flake8 dynaface --config $WORKSPACE/.flake8 --output-file=flake8-report.txt || true

                    echo "Running mypy..."
                    mypy --install-types --non-interactive || true
                    mypy dynaface --show-error-codes --no-color-output --no-error-summary > mypy-report.txt || true

                    echo "Running bandit..."
                    bandit -r dynaface -f txt -o bandit-report.txt || true

                    echo "Checking formatting with black..."
                    black --check dynaface > black-report.txt 2>&1 || true

                    echo "Checking imports with isort..."
                    isort dynaface --check-only > isort-report.txt || true
                '''
            }
            post {
                always {
                    archiveArtifacts artifacts: 'dynaface-lib/*.txt', allowEmptyArchive: true
                }
            }
        }
        stage('Run Tests & Generate Coverage') {
            steps {
                script {
                    sh '''
                        cd dynaface-lib
                        export PATH="$HOME/.pyenv/bin:$PATH"
                        eval "$(pyenv init --path)"
                        eval "$(pyenv virtualenv-init -)"
                        python3.11 -m pytest tests \
                            --junitxml=unit_test_results.xml \
                            --cov=. \
                            --cov-report=xml:coverage.xml \
                            --cov-report=html
                    '''
                }
            }
        }

        stage('Build Package') {
            steps {
                script {
                    // Build the package with setuptools via the build module
                    sh '''
                        cd dynaface-lib
                        echo "Cleaning up old .whl files..."
                        rm -rf dist/*  # Deletes old .whl files before building
                        python3.11 -m build --wheel
                    '''
                }
            }
        }

        stage('Validate Package with Twine') {
            steps {
                sh '''
                    cd dynaface-lib
                    pip install --upgrade twine
                    twine check dist/*
                '''
            }
        }

        stage('Archive Artifacts') {
            steps {
                script {
                    // Ensure the necessary paths exist before archiving
                    sh '''
                        cd dynaface-lib
                        mkdir -p dist  # Ensure dist exists
                    '''
                    archiveArtifacts artifacts: 'dynaface-lib/dist/*.whl', fingerprint: true
                    archiveArtifacts artifacts: 'dynaface-lib/coverage.xml',
                                      allowEmptyArchive: true  // Archive coverage XML
                    archiveArtifacts artifacts: 'dynaface-lib/htmlcov/**',
                                      allowEmptyArchive: true  // Archive HTML coverage
                }
            }
        }
        stage('Upload to S3') {
            steps {
                script {
                    sh '''
                        AWS_BUCKET_NAME="data.heatonresearch.com"
                        AWS_BUCKET_PATH="library/"

                        echo "Uploading built package to S3 at s3://$AWS_BUCKET_NAME/$AWS_BUCKET_PATH..."

                        cd dynaface-lib/dist
                        aws s3 cp *.whl s3://$AWS_BUCKET_NAME/$AWS_BUCKET_PATH --acl public-read
                    '''
                }
            }
        }
    }

    post {
        always {
            script {
                // Clean up build artifacts
                sh '''
                cd dynaface-lib
                rm -rf build dist dynaface.egg-info
            '''
            }

            // Archive test and coverage results
            junit 'dynaface-lib/unit_test_results.xml'

            recordCoverage(
            tools: [[parser: 'COBERTURA', pattern: 'dynaface-lib/coverage.xml']],
            id: 'pytest-coverage',
            name: 'Pytest Coverage',
            sourceCodeRetention: 'EVERY_BUILD',
            qualityGates: [
                [threshold: 60.0, metric: 'LINE', baseline: 'PROJECT', unstable: true],
                [threshold: 60.0, metric: 'BRANCH', baseline: 'PROJECT', unstable: true]
            ]
        )
        }
    }
}
